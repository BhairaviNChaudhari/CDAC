SECTION 1: Error-Driven Learning Assignment: Loop Errors 
javaCopypublic class InfiniteForLoop {
    public static void main(String[] args) {
        for (int i = 0; i < 10; i--) {
            System.out.println(i);
        }
    }
}

This loop runs infinitely because of an error in the loop control variable's update statement. 
Correction to be done: i++ that it will not go into infinite loop
snippet 2:

public class IncorrectWhileCondition {
    public static void main(String[] args) {
        int count = 5;
        while (count = 0) {
            System.out.println(count);
            count--;
        }
    }
}
The main problem is in the while loop condition: while (count = 0)
This is using the assignment operator = instead of the comparison operator ==

sinppet 3:
public class DoWhileCorrectCondition {
    public static void main(String[] args) {
        int num = 0;
        do {
            System.out.println(num);
            num++;
        } while (num >0);
    }
}

The condition num > 0 remains true, so the loop continues.
correction to be done: while condition should be while (num >=5);

Snippet 4:
public class OffByOneErrorForLoop {
    public static void main(String[] args) {
        for (int i = 1; i <= 10; i++) {
            System.out.println(i);
        }
        // Expected: 10 iterations with numbers 1 to 10
        // Actual: Prints numbers 1 to 10, but the task expected only 1 to 9
    }
}
 
The loop condition i <= 10 includes 10, causing it to print up to 10.
This is an off-by-one error, as we're including one more number than intended.
changes made: for (int i = 1; i < 10; i++)

SNippet 5:

public class WrongInitializationForLoop {
    public static void main(String[] args) {
        for (int i = 10; i >= 0; i++) {
            System.out.println(i);
        }
    }
}

The loop starts at 10 and keeps increasing indefinitely.
It will never terminate because i will always be >= 0.
Changes made:

Changed i++ to i-- in the update statement.

Snippet 6:

public class MisplacedForLoopBody {
    public static void main(String[] args) {
        for (int i = 0; i < 5; i++)
            System.out.println(i);
        System.out.println("Done");
    }
}

a for loop (or any control structure) is not followed by curly braces {}, only the immediately following statement is considered part of the loop body.

Changes made:

Added curly braces {} to enclose both print statements.

Snippet 7:

public class UninitializedWhileLoop {
    public static void main(String[] args) {
        int count;
        while (count < 10) {
            System.out.println(count);
            count++;
        }
    }
}
The variable 'count' is declared (int count;) but not initialized with a value.
In Java, local variables must be initialized before they can be used.

Changes made:
Added an initial value to 'count': int count = 0;
This gives 'count' a definite value before it's used in the while loop condition.

Snippet 8:
public class OffByOneDoWhileLoop {
    public static void main(String[] args) {
        int num = 1;
        do {
            System.out.println(num);
            num--;
        } while (num > 0);
    }
}

The loop only runs once, printing just the number 1 It's decrementing instead of incrementing
The condition doesn't allow it to reach 5.

Changes made:
Changed num-- to num++ to increment the number
Changed the condition to num <= 5 to continue the loop until num reaches 5

Snippet 9:
public class InfiniteForLoopUpdate {
    public static void main(String[] args) {
        for (int i = 0; i < 5; i += 2) {
            System.out.println(i);
        }
    }
}

Snippet 10:

public class IncorrectLoopUpdate { 
    public static void main(String[] args) { 
        int i = 0; 
        while (i < 5) { 
            System.out.println(i); 
            i += 2; // Error: This may cause unexpected results in output 
        } 
    } 
}
o Print Every Integer from 0 to 4: If the goal is to print every integer from 0 to 4, you should increment i by 1 instead of 2
Snippet 11:
public class IncorrectLoopUpdate { 
    public static void main(String[] args) { 
        int i = 0; 
        while (i < 5) { 
            System.out.println(i); 
            i += 2; // Error: This may cause unexpected results in output 
        } 
    } 
}
To Print Every Integer from 0 to 4: If the goal is to print every integer from 0 to 4, you should increment i by 1 instead of 2


Snippet 12:


public class LoopVariableScope { 
    public static void main(String[] args) { 
        for (int i = 0; i < 5; i++) { 
            int x = i * 2; 
        } 
        System.out.println(x); // Error: 'x' is not accessible here 
    } 
}

The error message Error: 'x' is not accessible here occurs because the variable x is declared inside the for loop block. 
 the scope of a variable is limited to the block (or curly braces {}) in which it is declared.

SECTION 2: Guess the Output.

Snippet 1: 
public class NestedLoopOutput { 
 public static void main(String[] args) { 
 for (int i = 1; i <= 3; i++) { 
 for (int j = 1; j <= 2; j++) { 
 System.out.print(i + " " + j + " "); 
 } 
 System.out.println(); 
 } 
 } 
} 

op:
1 1 1 2 
2 1 2 2 
3 1 3 2

Snippet 2: 

public class DecrementingLoop { 
 public static void main(String[] args) { 
 int total = 0; 
 for (int i = 5; i > 0; i--) { 
 total += i; 
 if (i == 3) continue; 
 total -= 1; 
 } 
 System.out.println(total); 
 } 
} 
 
op: 11

Snippet 3: 

public class WhileLoopBreak { 
 public static void main(String[] args) { 
 int count = 0; 
 while (count < 5) { 
 System.out.print(count + " "); 
 count++; 
 if (count == 3) break; 
 } 
 System.out.println(count); 
 } 
} 

op : 0 1 2 3

Snippet 4: 

public class DoWhileLoop { 
 public static void main(String[] args) { 
 int i = 1; 
 do { 
 System.out.print(i + " "); 
 i++; 
 } while (i < 5); 
 System.out.println(i); 
 } 
}

op : 1 2 3 4 5 

Snippet 5: 

public class ConditionalLoopOutput { 
 public static void main(String[] args) { 
 int num = 1; 
 for (int i = 1; i <= 4; i++) { 
 if (i % 2 == 0) { 
 num += i; 
 } else { 
 num -= i; 
 } 
 } 
 System.out.println(num); 
 } 
} 

op : 3

Snippet 6: 

public class IncrementDecrement { 
 public static void main(String[] args) { 
 int x = 5; 
 int y = ++x - x-- + --x + x++; 
 System.out.println(y); 
 } 
} 

op : 8

Snippet 7: 

public class NestedIncrement { 
 public static void main(String[] args) { 
 int a = 10; 
 int b = 5; 
 int result = ++a * b-- - --a + b++; 
 System.out.println(result); 
 } 
} 
 op : 49

Snippet 8: 

public class LoopIncrement { 
 public static void main(String[] args) { 
 int count = 0; 
 for (int i = 0; i < 4; i++) { 
 count += i++ - ++i; 
 } 
 System.out.println(count); 
 } 
} 

op : -4

